#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define BUFFER_SIZE 3
#define NUM_ITEMS 4

int buffer[BUFFER_SIZE];
int in = 0, out = 0;
int count = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t full = PTHREAD_COND_INITIALIZER;
pthread_cond_t empty = PTHREAD_COND_INITIALIZER;

void *producer(void *arg) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        pthread_mutex_lock(&mutex);
        while (count == BUFFER_SIZE) {
            printf("Buffer is full. Producer is waiting...\n");
            pthread_cond_wait(&empty, &mutex);
        }
        buffer[in] = i;
        in = (in + 1) % BUFFER_SIZE;
        count++;
        printf("Produced item %d\n", i);
        if (count == 1) {
            pthread_cond_signal(&full);
        }
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

void *consumer(void *arg) {
    int item;
    pthread_mutex_lock(&mutex);
    while (count == 0) {
        printf("Buffer is empty. Consumer is waiting...\n");
        pthread_cond_wait(&full, &mutex);
    }
    item = buffer[out];
    out = (out + 1) % BUFFER_SIZE;
    count--;
    printf("Consumed item %d\n", item);
    if (count == BUFFER_SIZE - 1) {
        pthread_cond_signal(&empty);
    }
    pthread_mutex_unlock(&mutex);
    return NULL;
}

int main() {
    pthread_t prod, cons;
    pthread_create(&cons, NULL, consumer, NULL);
    pthread_join(cons, NULL);
    pthread_create(&prod, NULL, producer, NULL);
    pthread_join(prod, NULL);

    return 0;
}
18 output : 
Buffer is empty. Consumer is waiting...
Consumed item 0
Produced item 0
Produced item 1
Produced
